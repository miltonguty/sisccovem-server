

import Handlebars from 'handlebars'
import pdf from 'html-pdf'
import path from "path"

// Handlebar helper support
const registerHelper = (conditionName, callback) =>
{
    Handlebars.registerHelper(conditionName, callback);
};
const registerPartial = (partialName, partial) =>
{
    Handlebars.registerPartial(partialName, partial);
}
const create = async (document, options) =>
{
    // Compile handlebar template
    if (!document || !document.template || !document.context)
    {
        return (new Error("Some, or all, options are missing."));
    }

    if (document.type !== 'buffer' && !document.path)
    {
        return (new Error("Please provide path parameter to save file or if you want buffer as output give parameter type = 'buffer'"));
    }

    var html = await Handlebars.compile(document.template)(document.context);

    if (document.type === 'buffer')
    {
        // Create PDF from html template generated by handlebars
        //Output will be buffer
        const createPDF = (html, options) => new Promise(((resolve, reject) =>
        {
            pdf.create(html, options).toBuffer((err, buffer) =>
            {
                if (err !== null) { reject(err); }
                else { resolve(buffer); }
            });
        }));

        return await createPDF(html, options);
    } else
    {
        const createPDF = (html, options) => new Promise(((resolve, reject) =>
        {
            pdf.create(html, options).toFile(document.path, (err, file) =>
            {
                if (err !== null) { reject(err); }
                else { resolve(file); }
            });
        }));

        return await createPDF(html, options);

    }


};
export default { create, registerHelper, registerPartial }